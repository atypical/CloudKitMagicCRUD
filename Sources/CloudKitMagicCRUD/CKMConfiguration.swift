//
//  CKMConfiguration.swift
//  CloudKitMagicCRUD
//
//  Created on 04/2025
//

import CloudKit
import Foundation

/// Configuration options for CloudKitMagicCRUD
public struct CKMConfiguration {
    
    /// Strategies for handling record IDs
    public enum RecordIDStrategy {
        /// Use CloudKit's auto-generated record IDs (default)
        case autoGenerated
        
        /// Use a UUID string as the record ID
        case uuid
        
        /// Use a custom string generator function for record IDs
        case custom(idGenerator: () -> String)
        
        /// Use a specific property from the model as the record ID
        case modelProperty(keyPath: String)
    }
    
    /// Strategy for generating and managing record IDs
    public var recordIDStrategy: RecordIDStrategy
    
    /// Whether to use the CloudKit record ID as the primary identifier for models
    public var useCloudKitRecordIDAsIdentifier: Bool
    
    /// Cache configuration settings
    public var cacheConfiguration: CacheConfiguration
    
    /// Error handling configuration settings
    public var errorHandlingConfiguration: ErrorHandlingConfiguration
    
    /// Configuration for the cache system
    public struct CacheConfiguration {
        /// Whether caching is enabled
        public var isCachingEnabled: Bool
        
        /// Time interval for cache expiration in seconds
        public var expirationTimeInterval: TimeInterval
        
        /// Maximum number of records to store in cache
        public var maxCacheSize: Int
        
        /// Creates a new cache configuration with specified or default values
        public init(isCachingEnabled: Bool = true, 
                   expirationTimeInterval: TimeInterval = 30.0,
                   maxCacheSize: Int = 1000) {
            self.isCachingEnabled = isCachingEnabled
            self.expirationTimeInterval = expirationTimeInterval
            self.maxCacheSize = maxCacheSize
        }
    }
    
    /// Configuration for error handling behavior
    public struct ErrorHandlingConfiguration {
        /// Whether to log errors to the console for debugging
        public var logErrorsToConsole: Bool
        
        /// Whether to include detailed field information in error messages
        public var includeDetailedFieldInfo: Bool
        
        /// Creates a new error handling configuration with specified or default values
        public init(logErrorsToConsole: Bool = true,
                   includeDetailedFieldInfo: Bool = true) {
            self.logErrorsToConsole = logErrorsToConsole
            self.includeDetailedFieldInfo = includeDetailedFieldInfo
        }
    }
    
    /// Creates a new configuration with specified or default values
    public init(recordIDStrategy: RecordIDStrategy = .autoGenerated,
               useCloudKitRecordIDAsIdentifier: Bool = false,
               cacheConfiguration: CacheConfiguration = CacheConfiguration(),
               errorHandlingConfiguration: ErrorHandlingConfiguration = ErrorHandlingConfiguration()) {
        self.recordIDStrategy = recordIDStrategy
        self.useCloudKitRecordIDAsIdentifier = useCloudKitRecordIDAsIdentifier
        self.cacheConfiguration = cacheConfiguration
        self.errorHandlingConfiguration = errorHandlingConfiguration
    }
}

/// Extension to provide predefined configurations
extension CKMConfiguration {
    /// Default configuration with balanced settings
    public static let `default` = CKMConfiguration()
    
    /// Configuration optimized for performance with extended caching
    public static let performanceOptimized = CKMConfiguration(
        recordIDStrategy: .uuid,
        useCloudKitRecordIDAsIdentifier: true,
        cacheConfiguration: CacheConfiguration(
            isCachingEnabled: true,
            expirationTimeInterval: 300.0, // 5 minutes
            maxCacheSize: 5000
        )
    )
    
    /// Configuration optimized for reduced memory usage
    public static let memoryOptimized = CKMConfiguration(
        recordIDStrategy: .autoGenerated,
        useCloudKitRecordIDAsIdentifier: false,
        cacheConfiguration: CacheConfiguration(
            isCachingEnabled: true,
            expirationTimeInterval: 30.0,
            maxCacheSize: 100
        )
    )
}
